@page "/Statistics"
@using Model
@using Practical.DataBase
@rendermode InteractiveServer
@inject ModelContext ef
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<div class="background-N4">
    <div class="statistics-product">
        <h3>Статистика по товарам</h3>
        <h4>Самые продаваемые товары за Период:</h4>
        <h5>от: <input type="date" @bind="_timeStart"/></h5>
        <h5>до: <input type="date" @bind="_timeEnd"/></h5>
        <button @onclick="GetTopSellingProduct">загрузить</button>
        @foreach (var product in _productsTopSelling)
        {
            <div class="statistics-stockBM-container">
                <div class="statistics-stockBM-description">
                    <div class="statistics-stockBM-description-header">
                        <h5>@product.ProductName</h5>
                    </div>
                    <h5>Сколько раз заказали:</h5>
                    <h6>@product.TotalQuantitySold</h6>
                    <h6>ID: @product.ProductId</h6>
                    <button class="product-description-button" @onclick="() => ShowDetail(product.ProductId)"><img src="Icon/info.svg"/>Больше информации</button>
                </div>
            </div>
        }
    </div>
    <div class="statistics-product">
        <h3>Статистика поставщику</h3>
        <h4>Объем продаж и закупок за Период:</h4>
        <h5>от: <input type="date" @bind="_timeStart"/></h5>
        <h5>до: <input type="date" @bind="_timeEnd"/></h5>
        <button @onclick="GetSupplierStatistics">загрузить</button>
        @foreach (var supplier in _supplierStatistics)
        {
            <div class="statistics-stockBM-container">
                <div class="statistics-stockBM-description">
                    <div class="statistics-stockBM-description-header">
                        <h5>@supplier.SupplierName</h5>
                    </div>
                    <h5>Сумма потраченных средств:</h5>
                    <h6>@supplier.TotalSpent</h6>
                    <h5>Количество приобретенных товаров:</h5>
                    <h6>@supplier.TotalQuantityPurchased</h6>
                    <h6>ID: @supplier.SupplierId</h6>
                    <button class="product-description-button" @onclick="() => ShowDetail(supplier.SupplierId)"><img src="Icon/info.svg"/>Больше информации</button>
                </div>
            </div>
        }
    </div>
    <div class="statistics-stock">
        <h3>Все товары от:</h3>
        <input type="date" @bind="_sinceDate"/>
        <h4>Товары требующие пополнения:  <button @onclick="GetNewProducts">загрузить</button></h4>
        @foreach (var product in _productsNewProducts)
        {
        <div class="statistics-stockBM-container">
            <img src="@product.Image"/>
            <div class="statistics-stockBM-description">
                <div class="statistics-stockBM-description-header">
                    <h5>@product.ProductName</h5><h6>Sale price: @product.SalePrice$</h6>
                </div>
                <h6>ID: @product.Id</h6>
                <button class="product-description-button" @onclick="() => ShowDetail(product.Id)"><img src="Icon/info.svg"/>Больше информации</button>
            </div>
        </div>
        }
    </div>
    <div class="statistics-stock">
        <h3>Статистика по складам</h3>
        <h4>Общая сумма остатка товаров на складе:</h4>
        <h5>@GetTotalInventory() $</h5>
        <button @onclick="GetProductBelowMinimum">загрузить</button>
        @foreach (var product in _productsBelowMinimum)
        {
        <div class="statistics-stockBM-container">
            <img src="@product.Image"/>
            <div class="statistics-stockBM-description">
                <div class="statistics-stockBM-description-header">
                    <h5>@product.ProductName</h5><h6>Sale price: @product.SalePrice$</h6>
                </div>
                <h6>ID: @product.Id</h6>
                <button class="product-description-button" @onclick="() => ShowDetail(product.Id)"><img src="Icon/info.svg"/>Больше информации</button>
            </div>
        </div>
        }
    </div>
</div>

@code {
    /*самые продаваемые товары за период, Общие закупки за период
     анализ поставщиков,*/
    private List<Purchase> _purchases = new List<Purchase>();
    private List<Product> _products = new List<Product>();
    private List<Supplier> _suppliers = new List<Supplier>();
    private List<Product> _productsBelowMinimum = new List<Product>();
    private List<ProductSales> _productsTopSelling = new List<ProductSales>();
    private List<SupplierStatistic> _supplierStatistics = new List<SupplierStatistic>();
    private List<Product> _productsNewProducts = new List<Product>();
    private DateTime _sinceDate { get; set; }
    private DateTime _timeStart { get; set; } = DateTime.Now.AddDays(-14);
    private DateTime _timeEnd { get; set; } = DateTime.Now; 
    
    

    protected override void OnInitialized()
    {
        LoadData();
    }

    private void LoadData()
    {
        _products = ef.Products.ToList();
        _purchases = ef.Purchases.ToList();
        _suppliers = ef.Suppliers.ToList();
    }
    
    private void ShowDetail(int productId)
    {
        NavigationManager.NavigateTo($"/ProductDemo/{productId}");
    }
    
    public decimal GetTotalInventory()
    {
        return _products.Sum(p => p.SalePrice * p.QuantityInStock);
    }

    public void GetProductBelowMinimum()
    {
        LoadData(); 
        _productsBelowMinimum = _products.Where(p => p.QuantityInStock < p.MinimumStockLevel).ToList();
    }
    public void GetNewProducts()
    {
        LoadData();
        _productsNewProducts = _products.Where(p => p.DateAdded >= _sinceDate).ToList();
    }

    public void GetTopSellingProduct()
    {
        var salesData = _purchases.Where(p => p.PurchaseDate >= _timeStart && p.PurchaseDate <= _timeEnd)
            .GroupBy(p => p.ProductId)
            .Select(g => new { ProductId = g.Key, QuantitySold = g.Sum(p => p.Quantity) })
            .Join(_products, g => g.ProductId, p => p.Id, (g, p) => new ProductSales
                {
                    ProductId = p.Id,
                    ProductName = p.ProductName,
                    TotalQuantitySold = g.QuantitySold
                }
            );
        _productsTopSelling = salesData.OrderByDescending(s => s.TotalQuantitySold).Take(10).ToList();
        StateHasChanged();
    }
    public class ProductSales
    {
        public int ProductId { get; set; } 
        public string ProductName { get; set; }
        public int TotalQuantitySold { get; set; }
    }

    public void GetSupplierStatistics()
    {
        var query = from p in _purchases
            join prod in _products on p.ProductId equals prod.Id
            join sup in _suppliers on prod.SupplierId equals sup.Id
            where p.PurchaseDate >= _timeStart && p.PurchaseDate <= _timeEnd
            group p by new {sup.Id, sup.Name}into g
            select new SupplierStatistic 
            {
                SupplierId = g.Key.Id,
                SupplierName = g.Key.Name,
                TotalQuantityPurchased = g.Sum(p=> p.Quantity),
                TotalSpent = g.Sum(p=> p.TotalPrice)
            };
        _supplierStatistics = query.ToList();
    }
    public class SupplierStatistic
    {
       public int SupplierId { get; set; } 
       public string SupplierName { get; set; }
       public int TotalQuantityPurchased { get; set; }
       public decimal TotalSpent { get; set; }
    }
}